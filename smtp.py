import smtplib, ssl
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

import os
import configparser
import logging


creds = {"host": "smtp@gmail.com", "email": "test@gmail.com", "password": "password"}
dir_path = os.path.dirname(os.path.realpath(__file__))
if os.path.isfile(dir_path + "\\creds.ini"):
    config = configparser.ConfigParser()
    config.read("creds.ini")
    creds = config["SMTP"]
    serverIP = f"{config['CREDENTIALS']['host']}:5000"
else:
    logging.warning("No creds.ini detected. Using Default. (ask from Amin)")


def send_email(receiver_email, message):
    """ Sends email to reciever_email

    Parameters:
    reciever_email (string): email of reciever
    message (MIMEMultipart): message to be sent to reviever

    """
    context = ssl.create_default_context()
    with smtplib.SMTP_SSL(
        creds["smtp_server"], int(creds["port"]), context=context
    ) as server:
        server.login(creds["email"], creds["password"])
        server.sendmail(creds["email"], receiver_email, message.as_string())
    


def send_verify(receiver_email, token):
    """ send a verification email to reciever email

    Parameters:
    reciever_email (string): email of reciever
    token (string): token generated by server
    
    """

    message = MIMEMultipart("alternative")
    message["Subject"] = "Hi there. Welcome to Amble."
    message["From"] = creds["email"]
    message["To"] = receiver_email
    token = serverIP + "/amble/auth/verify/" + token
    # send as text
    text = f"""\
    Click on the link to verify your acount:
    {token}
    """
    part1 = MIMEText(text, "plain")
    message.attach(part1)

    # send as html
    html = f"""\
    <html>
        <body>
            <p>Click on the link to verify your acount:
            <br><a href="{token}">{token}</a>
            <p>
        </body>
    </html>
    """
    part2 = MIMEText(html, "html")
    message.attach(part2)

    send_email(receiver_email, message)
    print(f"verification sent to {receiver_email}")

def send_reset(receiver_email, token):
    """ send a password reset email to reciever_email

    Parameters:
    reciever_email (string): email of reciever
    token (string): token generated by server
    
    """

    message = MIMEMultipart("alternative")
    message["Subject"] = "Amble: Reset Password"
    message["From"] = creds["email"]
    message["To"] = receiver_email
    token = serverIP + "/amble/auth/reset/" + token
    # send as text
    text = f"""\
    Click on the link to reset password:
    {token}
    """
    part1 = MIMEText(text, "plain")
    message.attach(part1)

    # send as html
    html = f"""\
    <html>
        <body>
            <p>Click on the link to reset your password:
            <br><a href="{token}">{token}</a>
            <p>
        </body>
    </html>
    """
    part2 = MIMEText(html, "html")
    message.attach(part2)

    send_email(receiver_email, message)
    print(f"reset password sent to {receiver_email}")


if __name__ == "__main__":
    pass
